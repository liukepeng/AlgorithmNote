class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length();
        int m = word2.length();

        // base case
        // 如果有一个字符串未空串，那么最小编辑距离就是要么是n,要么是m，即：
        // 如果word1 == "", 则插入word2，最小编辑距离为m，
        // 如果Word2 == "", 则插入word1，最小编辑距离为n
        if (n * m == 0) {
            return n + m;
        }
        
        // 定义dp数组：搭配[i][j]标识字符串word1[0..i]和word2[0..j]的最小编辑距离
        int[][] dp = new int[n + 1][m + 1];

        // 初始化边界值
        // j为0，即word2为空串，最小编辑距离即为插入word1,即dp[i][0] = 0..n-1
        for (int i = 0; i <= n; i++) {
            dp[i][0] = i;
        }
        // i为0，即word1为空串，最小编辑距离即为插入word2,即dp[0][j] = 0..m-1
        for (int j = 0; j <= m; j++) {
            dp[0][j] = j;
        }

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    // 同时往前移，相当于啥都不做
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = min(
                        dp[i][j -1] + 1, // j往前移，相等于插入一步，步数加一
                        dp[i-1][j] + 1, // i往前移，相当于删除一步，步数加一
                        dp[i-1][j-1] + 1 // ij同时往前移，相当于替换，步数加一
                    );
                }
            }
        }
        return dp[n][m];
    }

    int min(int a, int b, int c) {
        return Math.min(a, Math.min(b, c));
    }
}
