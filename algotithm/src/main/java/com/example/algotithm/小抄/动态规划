斐波那契数列
1. 暴力递归
  int fib(int N) {
    if (N == 1 || N == 2) return 1;
    return fib(N-1) + fib(N-2);
  }

2. 带备忘录的递归解法（自顶向下）
  int fib(int N) {
    if (N < 1) return 0;
    // 备忘录全初始化为0
    vector<int> memo(N +1, 0);
    // 进行带备忘录的递归
    return helper(memo, N);
  }
  
  int helper(vector<int> memo, int n) {
    // base case
    if (n == 1 || n == 2) return 1;
    // 已经计算过
    if (meno[n] != 0) return memo[n];
    memo[n] = helper(memo, n - 1) + helper(memo, n - 2);
    return memo[n]
   }
   
   3. dp数组的迭代解法（自底向上）
    int fib(int N) {
      if (N < 1) return 0;
      if (N == 1 || N == 2) return 1;
      dp[1] == dp[2] = 1;
      for (int i = 3; i <= N; i++) {
          dp[i] = dp[i-1] + dp[i-2];
       }
       return dp[N];
    }
    
二、凑零钱问题
def coinChange(coin: List[int], amount: int) :
    def dp(n):
        if n == 0: return 0
        if n < 0: return -1
        res = float('INF')
        for coin int coins:
            subproblem = dp(n- coin)
            if subproblem == -1: continue
            res = min(res, 1 + subproblem)
        return res if res != float('INF') else -1
    return dp(amount)
